{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { request as httpRequest, IncomingMessage, ClientRequest } from 'http'\r\nimport { request as httpsRequest } from 'https'\r\nimport { PassThrough } from 'stream'\r\nimport urlLib = require('url')\r\nimport concat = require('concat-stream')\r\nimport { CookieJar } from 'tough-cookie'\r\nimport { createUnzip } from 'zlib'\r\nimport { Headers } from './base'\r\nimport { Request, TransportOptions, Middleware } from './request'\r\nimport { Response } from './response'\r\nimport { stringify, headers } from './plugins/index'\r\n\r\nexport type Types = 'text' | 'buffer' | 'array' | 'uint8array' | 'stream' | string\r\n\r\n/**\r\n * List of valid node response types.\r\n */\r\nconst validTypes = ['text', 'buffer', 'array', 'uint8array', 'stream']\r\n\r\n/**\r\n * Node transport options.\r\n */\r\nexport interface Options {\r\n  type?: Types\r\n  unzip?: boolean\r\n  jar?: CookieJar\r\n  agent?: any\r\n  maxRedirects?: number\r\n  rejectUnauthorized?: boolean\r\n  followRedirects?: boolean\r\n  confirmRedirect?: (request: ClientRequest, response: IncomingMessage) => boolean\r\n  ca?: string | Buffer | Array<string | Buffer>\r\n  cert?: string | Buffer\r\n  key?: string | Buffer\r\n  maxBufferSize?: number\r\n}\r\n\r\n/**\r\n * Create a transport object.\r\n */\r\nexport function createTransport (options: Options): TransportOptions {\r\n  return {\r\n    use,\r\n    abort,\r\n    open (request: Request) {\r\n      return handle(request, options)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Default uses.\r\n */\r\nconst use: Middleware[] = [stringify(), headers()]\r\n\r\n/**\r\n * Redirection types to handle.\r\n */\r\nenum REDIRECT_TYPE {\r\n  FOLLOW_WITH_GET,\r\n  FOLLOW_WITH_CONFIRMATION\r\n}\r\n\r\n/**\r\n * Possible redirection status codes.\r\n */\r\nconst REDIRECT_STATUS: { [status: number]: number } = {\r\n  '301': REDIRECT_TYPE.FOLLOW_WITH_GET,\r\n  '302': REDIRECT_TYPE.FOLLOW_WITH_GET,\r\n  '303': REDIRECT_TYPE.FOLLOW_WITH_GET,\r\n  '307': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION,\r\n  '308': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION\r\n}\r\n\r\n/**\r\n * Open a HTTP request with node.\r\n */\r\nfunction handle (request: Request, options: Options): Promise<Response> {\r\n  const { followRedirects, type, unzip, rejectUnauthorized, ca, key, cert, agent } = options\r\n  const { url, method, body } = request\r\n  const maxRedirects = num(options.maxRedirects, 5)\r\n  const maxBufferSize = num(options.maxBufferSize, type === 'stream' ? Infinity : 2 * 1000 * 1000)\r\n  const storeCookies = getStoreCookies(options)\r\n  const attachCookies = getAttachCookies(request, options)\r\n  const confirmRedirect = options.confirmRedirect || falsey\r\n  let requestCount = 0\r\n\r\n  if (type && validTypes.indexOf(type) === -1) {\r\n    return Promise.reject(\r\n      request.error(`Unsupported type: ${type}`, 'ETYPE')\r\n    )\r\n  }\r\n\r\n  // Automatically enable unzipping.\r\n  if (unzip !== false && request.get('Accept-Encoding') == null) {\r\n    request.set('Accept-Encoding', 'gzip,deflate')\r\n  }\r\n\r\n  /**\r\n   * Create the HTTP request, in a way we can re-use this.\r\n   */\r\n  function get (url: string, method: string, body?: any): Promise<Response> {\r\n    // Check redirection count before executing request.\r\n    if (requestCount++ > (maxRedirects as number)) {\r\n      return Promise.reject(\r\n        request.error(`Exceeded maximum of ${maxRedirects} redirects`, 'EMAXREDIRECTS')\r\n      )\r\n    }\r\n\r\n    return attachCookies(url)\r\n      .then(function () {\r\n        return new Promise<Response>((resolve, reject) => {\r\n          const arg: any = urlLib.parse(url)\r\n          const isHttp = arg.protocol !== 'https:'\r\n          const engine: typeof httpRequest = isHttp ? httpRequest : httpsRequest\r\n\r\n          // Attach request options.\r\n          arg.method = method\r\n          arg.headers = request.toHeaders()\r\n          arg.agent = agent\r\n          arg.rejectUnauthorized = rejectUnauthorized !== false\r\n          arg.ca = ca\r\n          arg.cert = cert\r\n          arg.key = key\r\n\r\n          const rawRequest = engine(arg)\r\n\r\n          // Track upload/download progress through a stream.\r\n          const requestStream = new PassThrough()\r\n          const responseStream = new PassThrough()\r\n          let uploadedBytes = 0\r\n          let downloadedBytes = 0\r\n\r\n          requestStream.on('data', function (chunk: Buffer) {\r\n            uploadedBytes += chunk.length\r\n            request._setUploadedBytes(uploadedBytes)\r\n          })\r\n\r\n          requestStream.on('end', function () {\r\n            request._setUploadedBytes(uploadedBytes, 1)\r\n          })\r\n\r\n          responseStream.on('data', function (chunk: Buffer) {\r\n            downloadedBytes += chunk.length\r\n            request._setDownloadedBytes(downloadedBytes)\r\n\r\n            // Abort on the max buffer size.\r\n            if (downloadedBytes > (maxBufferSize as number)) {\r\n              rawRequest.abort()\r\n              responseStream.emit('error', request.error('Response too large', 'ETOOLARGE'))\r\n            }\r\n          })\r\n\r\n          responseStream.on('end', function () {\r\n            request._setDownloadedBytes(downloadedBytes, 1)\r\n          })\r\n\r\n          // Handle the HTTP response.\r\n          function response (incomingMessage: IncomingMessage) {\r\n            const { headers: headersRaw, rawHeaders, statusCode: statusRaw, statusMessage: statusTextRaw } = incomingMessage\r\n            var headers: Headers = headersRaw as Headers\r\n            var status: number = statusRaw as number\r\n            var statusText: string = statusTextRaw as string\r\n            const redirect = REDIRECT_STATUS[status]\r\n\r\n            // Handle HTTP redirects.\r\n            if (followRedirects !== false && redirect != null && headers.location) {\r\n              const newUrl = urlLib.resolve(url, String(headers.location))\r\n\r\n              // Ignore the result of the response on redirect.\r\n              incomingMessage.resume()\r\n\r\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_GET) {\r\n                // Update the \"Content-Length\" for updated redirection body.\r\n                request.set('Content-Length', '0')\r\n\r\n                return get(newUrl, arg.method === 'HEAD' ? 'HEAD' : 'GET')\r\n              }\r\n\r\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION) {\r\n                // Following HTTP spec by automatically redirecting with GET/HEAD.\r\n                if (arg.method === 'GET' || arg.method === 'HEAD') {\r\n                  return get(newUrl, method, body)\r\n                }\r\n\r\n                // Allow the user to confirm redirect according to HTTP spec.\r\n                if (confirmRedirect(rawRequest, incomingMessage)) {\r\n                  return get(newUrl, method, body)\r\n                }\r\n              }\r\n            }\r\n\r\n            request.downloadLength = num(headers['content-length'], null as unknown as number) as number\r\n            incomingMessage.pipe(responseStream)\r\n\r\n            return handleResponse(responseStream, headers, options)\r\n              .then(function (body) {\r\n                return new Response({\r\n                  status,\r\n                  headers,\r\n                  statusText,\r\n                  rawHeaders,\r\n                  body,\r\n                  url\r\n                })\r\n              })\r\n          }\r\n\r\n          // Emit a request error.\r\n          function emitError (error: Error) {\r\n            // Abort request on error.\r\n            rawRequest.abort()\r\n            reject(error)\r\n          }\r\n\r\n          rawRequest.on('response', function (message: IncomingMessage) {\r\n            resolve(storeCookies(url, message.headers as Headers).then(() => response(message)))\r\n          })\r\n\r\n          rawRequest.on('error', function (error: Error) {\r\n            emitError(request.error(`Unable to connect to \"${url}\"`, 'EUNAVAILABLE', error))\r\n          })\r\n\r\n          request._raw = rawRequest\r\n          request.uploadLength = num(rawRequest.getHeader('content-length'), null as unknown as number) as number\r\n          requestStream.pipe(rawRequest)\r\n          requestStream.on('error', emitError)\r\n\r\n          // Pipe the body to the stream.\r\n          if (body) {\r\n            if (typeof body.pipe === 'function') {\r\n              body.pipe(requestStream)\r\n              body.on('error', emitError)\r\n            } else {\r\n              requestStream.end(body)\r\n            }\r\n          } else {\r\n            requestStream.end()\r\n          }\r\n        })\r\n      })\r\n  }\r\n\r\n  return get(url, method, body)\r\n}\r\n\r\n/**\r\n * Close the current HTTP request.\r\n */\r\nfunction abort (request: Request) {\r\n  request._raw.abort()\r\n}\r\n\r\n/**\r\n * Parse a value into a number.\r\n */\r\nfunction num (value: any, fallback?: number) {\r\n  if (value == null) {\r\n    return fallback\r\n  }\r\n\r\n  return isNaN(value) ? fallback : Number(value)\r\n}\r\n\r\n/**\r\n * Used to check redirection support.\r\n */\r\nfunction falsey () {\r\n  return false\r\n}\r\n\r\n/**\r\n * Read cookies from the cookie jar.\r\n */\r\nfunction getAttachCookies (request: Request, options: Options): (url: string) => Promise<any> {\r\n  const requestCookieString = request.getAll('Cookie').join('; ')\r\n\r\n  if (!options.jar) {\r\n    return () => Promise.resolve()\r\n  }\r\n\r\n  return function (url: string) {\r\n    return new Promise<void>(function (resolve, reject) {\r\n      let cookieString = requestCookieString\r\n\r\n      options.jar?.getCookieString(url, function (err: Error, jarCookieString?: string) {\r\n        if (err) {\r\n          return reject(err)\r\n        }\r\n\r\n        if (jarCookieString) {\r\n          cookieString = cookieString ? `${cookieString}; ${jarCookieString}` : jarCookieString\r\n        }\r\n\r\n        if (cookieString) {\r\n          request.set('Cookie', cookieString)\r\n        }\r\n\r\n        return resolve()\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Put cookies in the cookie jar.\r\n */\r\nfunction getStoreCookies (options: Options): (url: string, headers: Headers) => Promise<any> {\r\n  const { jar } = options\r\n\r\n  if (!jar) {\r\n    return () => Promise.resolve()\r\n  }\r\n\r\n  return function (url, headers) {\r\n    const cookies = headers['set-cookie']\r\n\r\n    if (!cookies) {\r\n      return Promise.resolve()\r\n    }\r\n\r\n    const storeCookies = (Array.isArray(cookies) ? cookies : [cookies]).map(function (cookie) {\r\n      return new Promise<void>(function (resolve, reject) {\r\n        jar.setCookie(cookie, url, { ignoreError: true }, function (err: Error) {\r\n          return err ? reject(err) : resolve()\r\n        })\r\n      })\r\n    })\r\n\r\n    return Promise.all(storeCookies)\r\n  }\r\n}\r\n\r\n/**\r\n * Handle the HTTP response body encoding.\r\n */\r\nfunction handleResponse (\r\n  stream: PassThrough,\r\n  headers: { [key: string]: any },\r\n  options: Options\r\n) {\r\n  const type = options.type || 'text'\r\n  const unzip = options.unzip !== false\r\n\r\n  const result = new Promise<any>((resolve, reject) => {\r\n    if (unzip) {\r\n      const enc = headers['content-encoding']\r\n\r\n      if (enc === 'deflate' || enc === 'gzip') {\r\n        const unzip = createUnzip()\r\n        stream.pipe(unzip)\r\n        stream.on('error', (err: Error) => unzip.emit('error', err))\r\n        stream = unzip\r\n      }\r\n    }\r\n\r\n    // Return the raw stream.\r\n    if (type === 'stream') {\r\n      return resolve(stream)\r\n    }\r\n\r\n    const encoding = type === 'text' ? 'string' : type\r\n    const concatStream = concat({ encoding }, resolve)\r\n\r\n    stream.on('error', reject)\r\n    stream.pipe(concatStream)\r\n  })\r\n\r\n  return result\r\n}\r\n"]}