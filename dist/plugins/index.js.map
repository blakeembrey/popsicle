{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/plugins/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,oCAAsC;AACtC,mCAAmD;AAInD,2CAAwB;AAKxB,SAAgB,OAAO;IACrB,IAAM,MAAM,GAAG,gBAAa,EAAE,CAAA;IAE9B,OAAO,UAAU,OAAgB,EAAE,IAA6B;QAE9D,OAAO,MAAM,CAAC,OAAO,EAAE;YAErB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;gBAC9B,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,oDAAoD,CAAC,CAAA;aAChF;YAID,IAAI,OAAO,CAAC,IAAI,YAAY,QAAQ,EAAE;gBACpC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,gCAAgC,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;gBAG1F,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO;oBACzB,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,GAAU,EAAE,MAAc;wBACzD,IAAI,GAAG,EAAE;4BACP,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAA;yBAC5C;6BAAM;4BACL,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;yBAC9C;wBAED,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;oBACxB,CAAC,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;aACH;YAED,IAAI,MAAM,GAAG,CAAC,CAAA;YACd,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YAGzB,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;gBAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;qBACzB;iBACF;qBAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBACnC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;iBACjC;qBAAM;oBACL,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;iBACrB;gBAED,IAAI,MAAM,EAAE;oBACV,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;iBAC9C;qBAAM,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC1C,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAA;iBAC5C;qBAAM;oBACL,OAAO,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC,CAAA;iBAChF;aACF;YAED,OAAO,IAAI,EAAE,CAAA;QACf,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC;AAzDD,0BAyDC","sourcesContent":["import FormData = require('form-data')\r\nimport { headers as commonHeaders } from './common'\r\nimport { Request } from '../request'\r\nimport { Response } from '../response'\r\n\r\nexport * from './common'\r\n\r\n/**\r\n * Fill default headers with requests (automatic \"Content-Length\" and \"User-Agent\").\r\n */\r\nexport function headers () {\r\n  const common = commonHeaders()\r\n\r\n  return function (request: Request, next: () => Promise<Response>) {\r\n    // Set up common headers.\r\n    return common(request, function () {\r\n      // Specify a default user agent in node.\r\n      if (!request.get('User-Agent')) {\r\n        request.set('User-Agent', 'Popsicle (https://github.com/blakeembrey/popsicle)')\r\n      }\r\n\r\n      // Manually set the `Content-Length` and `Content-Type` headers from the\r\n      // form data object because we need to handle boundaries and streams.\r\n      if (request.body instanceof FormData) {\r\n        request.set('Content-Type', 'multipart/form-data; boundary=' + request.body.getBoundary())\r\n\r\n        // Asynchronously compute the content length.\r\n        return new Promise((resolve) => {\r\n          request.body.getLength(function (err: Error, length: number) {\r\n            if (err) {\r\n              request.set('Transfer-Encoding', 'chunked')\r\n            } else {\r\n              request.set('Content-Length', String(length))\r\n            }\r\n\r\n            return resolve(next())\r\n          })\r\n        })\r\n      }\r\n\r\n      let length = 0\r\n      const body = request.body\r\n\r\n      // Attempt to manually compute the content length.\r\n      if (body && !request.get('Content-Length')) {\r\n        if (Array.isArray(body)) {\r\n          for (let i = 0; i < body.length; i++) {\r\n            length += body[i].length\r\n          }\r\n        } else if (typeof body === 'string') {\r\n          length = Buffer.byteLength(body)\r\n        } else {\r\n          length = body.length\r\n        }\r\n\r\n        if (length) {\r\n          request.set('Content-Length', String(length))\r\n        } else if (typeof body.pipe === 'function') {\r\n          request.set('Transfer-Encoding', 'chunked')\r\n        } else {\r\n          return Promise.reject(request.error('Argument error, `options.body`', 'EBODY'))\r\n        }\r\n      }\r\n\r\n      return next()\r\n    })\r\n  }\r\n}\r\n"]}