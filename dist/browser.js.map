{"version":3,"file":"browser.js","sourceRoot":"","sources":["../src/browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { RawHeaders } from './base'\r\nimport { Request } from './request'\r\nimport { Response } from './response'\r\nimport { stringify, headers } from './plugins/index'\r\n\r\nexport type Types = 'text' | 'document' | 'blob' | 'arraybuffer' | 'json'\r\n\r\n/**\r\n * Browser transport options.\r\n */\r\nexport interface Options {\r\n  type?: Types\r\n  withCredentials?: boolean\r\n  overrideMimeType?: string\r\n}\r\n\r\n/**\r\n * Create a transport object.\r\n */\r\nexport function createTransport (options: Options) {\r\n  return {\r\n    use,\r\n    abort,\r\n    open (request: Request) {\r\n      return handle(request, options)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Default `use`.\r\n */\r\nconst use = [stringify(), headers()]\r\n\r\n/**\r\n * Default open handler.\r\n */\r\nfunction handle (request: Request, options: Options): Promise<Response> {\r\n  return new Promise(function (resolve, reject) {\r\n    const type = options.type || 'text'\r\n    const { url, method } = request\r\n\r\n    // Loading HTTP resources from HTTPS is restricted and uncatchable.\r\n    if (window.location.protocol === 'https:' && /^http\\:/.test(url)) {\r\n      return reject(request.error(`The request to \"${url}\" was blocked`, 'EBLOCKED'))\r\n    }\r\n\r\n    const xhr = request._raw = new XMLHttpRequest()\r\n\r\n    function done () {\r\n      return new Promise<Response>(resolve => {\r\n        return resolve(new Response({\r\n          status: xhr.status === 1223 ? 204 : xhr.status,\r\n          statusText: xhr.statusText,\r\n          rawHeaders: parseToRawHeaders(xhr.getAllResponseHeaders()),\r\n          body: type === 'text' ? xhr.responseText : xhr.response,\r\n          url: xhr.responseURL\r\n        }))\r\n      })\r\n    }\r\n\r\n    xhr.onload = () => resolve(done())\r\n    xhr.onabort = () => resolve(done())\r\n\r\n    xhr.onerror = function () {\r\n      return reject(request.error(`Unable to connect to \"${request.url}\"`, 'EUNAVAILABLE'))\r\n    }\r\n\r\n    // Use `progress` events to avoid calculating byte length.\r\n    xhr.onprogress = function (e: ProgressEvent) {\r\n      if (e.lengthComputable) {\r\n        request.downloadLength = e.total\r\n      }\r\n\r\n      request._setDownloadedBytes(e.loaded)\r\n    }\r\n\r\n    xhr.upload.onloadend = () => request.downloaded = 1\r\n\r\n    // No upload will occur with these requests.\r\n    if (method === 'GET' || method === 'HEAD' || !xhr.upload) {\r\n      request.uploadLength = 0\r\n      request._setUploadedBytes(0, 1)\r\n    } else {\r\n      xhr.upload.onprogress = function (e: ProgressEvent) {\r\n        if (e.lengthComputable) {\r\n          request.uploadLength = e.total\r\n        }\r\n\r\n        request._setUploadedBytes(e.loaded)\r\n      }\r\n\r\n      xhr.upload.onloadend = () => request.uploaded = 1\r\n    }\r\n\r\n    // XHR can fail to open when site CSP is set.\r\n    try {\r\n      xhr.open(method, url)\r\n    } catch (e) {\r\n      return reject(request.error(`Refused to connect to \"${url}\"`, 'ECSP', e))\r\n    }\r\n\r\n    // Send cookies with CORS.\r\n    if (options.withCredentials) {\r\n      xhr.withCredentials = true\r\n    }\r\n\r\n    // Enable overriding the response MIME handling.\r\n    if (options.overrideMimeType) {\r\n      xhr.overrideMimeType(options.overrideMimeType)\r\n    }\r\n\r\n    // Use the passed in type for the response.\r\n    if (type !== 'text') {\r\n      try {\r\n        xhr.responseType = type\r\n      } finally {\r\n        if (xhr.responseType !== type) {\r\n          return reject(request.error(`Unsupported type: ${type}`, 'ETYPE'))\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < request.rawHeaders.length; i += 2) {\r\n      xhr.setRequestHeader(request.rawHeaders[i], request.rawHeaders[i + 1])\r\n    }\r\n\r\n    xhr.send(request.body)\r\n  })\r\n}\r\n\r\n/**\r\n * Close the current HTTP request.\r\n */\r\nfunction abort (request: Request) {\r\n  request._raw.abort()\r\n}\r\n\r\n/**\r\n * Parse a headers string into an array of raw headers.\r\n */\r\nfunction parseToRawHeaders (headers: string): RawHeaders {\r\n  const rawHeaders: RawHeaders = []\r\n  const lines = headers.split(/\\r?\\n/)\r\n\r\n  for (const line of lines) {\r\n    if (line) {\r\n      const indexOf = line.indexOf(':')\r\n      const name = line.substr(0, indexOf).trim()\r\n      const value = line.substr(indexOf + 1).trim()\r\n\r\n      rawHeaders.push(name, value)\r\n    }\r\n  }\r\n\r\n  return rawHeaders\r\n}\r\n"]}