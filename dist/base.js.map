{"version":3,"file":"base.js","sourceRoot":"","sources":["../src/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { parse, format, Url } from 'url'\r\nimport { parse as parseQuery } from 'querystring'\r\nimport { splice } from './support'\r\n\r\n/**\r\n * Query parameters in object notation.\r\n */\r\nexport interface Query {\r\n  [key: string]: string | string[]\r\n}\r\n\r\n/**\r\n * Headers in object notation.\r\n */\r\nexport interface Headers {\r\n  [name: string]: string | string[]\r\n}\r\n\r\n/**\r\n * Headers stored in a continuous array.\r\n */\r\nexport type RawHeaders = string[]\r\n\r\n/**\r\n * Base request/response options.\r\n */\r\nexport interface BaseOptions {\r\n  url?: string\r\n  query?: string | Query\r\n  headers?: Headers\r\n  rawHeaders?: RawHeaders\r\n}\r\n\r\n/**\r\n * Consistently lower case a header name.\r\n */\r\nfunction lowerHeader (key: string) {\r\n  const lower = key.toLowerCase()\r\n\r\n  if (lower === 'referrer') {\r\n    return 'referer'\r\n  }\r\n\r\n  return lower\r\n}\r\n\r\n/**\r\n * Extract the content type from a header string.\r\n */\r\nfunction type (str?: string) {\r\n  return str == null ? null : str.split(/ *; */, 1)[0]\r\n}\r\n\r\n/**\r\n * Concat two header values together.\r\n */\r\nfunction concat (a: string | string[], b: string): string | string[] {\r\n  if (a == null) {\r\n    return b\r\n  }\r\n\r\n  return Array.isArray(a) ? a.concat(b) : [a, b]\r\n}\r\n\r\n/**\r\n * Create a base class for requests and responses.\r\n */\r\nexport class Base {\r\n  Url: Url = {}\r\n  rawHeaders: RawHeaders = []\r\n\r\n  constructor ({ url, headers, rawHeaders, query }: BaseOptions) {\r\n    if (url != null) {\r\n      this.url = url\r\n    }\r\n\r\n    if (query != null) {\r\n      this.query = Object.assign(this.query, typeof query === 'string' ? parseQuery(query) : query)\r\n    }\r\n\r\n    // Enables proxying of `rawHeaders`.\r\n    if (rawHeaders) {\r\n      if (rawHeaders.length % 2 === 1) {\r\n        throw new TypeError(`Expected raw headers length to be even, was ${rawHeaders.length}`)\r\n      }\r\n\r\n      this.rawHeaders = rawHeaders.slice(0)\r\n    } else {\r\n      this.headers = headers as Headers\r\n    }\r\n  }\r\n\r\n  get url () {\r\n    return format(this.Url)\r\n  }\r\n\r\n  set url (url: string) {\r\n    this.Url = parse(url, true, true)\r\n  }\r\n\r\n  set query (query: string | Query) {\r\n    this.Url.query = typeof query === 'string' ? parseQuery(query) : query\r\n    this.Url.search = null as any\r\n  }\r\n\r\n  get query () {\r\n    return this.Url.query as Query\r\n  }\r\n\r\n  get headers () {\r\n    const headers: Headers = {}\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      const key = lowerHeader(this.rawHeaders[i])\r\n      const value = concat(headers[key], this.rawHeaders[i + 1])\r\n      headers[key] = value\r\n    }\r\n\r\n    return headers\r\n  }\r\n\r\n  set headers (headers: Headers) {\r\n    this.rawHeaders = []\r\n\r\n    if (headers) {\r\n      for (const key of Object.keys(headers)) {\r\n        this.append(key, headers[key])\r\n      }\r\n    }\r\n  }\r\n\r\n  toHeaders () {\r\n    const headers: Headers = {}\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      const key = this.rawHeaders[i]\r\n      const value = concat(headers[key], this.rawHeaders[i + 1])\r\n      headers[key] = value\r\n    }\r\n\r\n    return headers\r\n  }\r\n\r\n  set (name: string, value?: string | string[]): this {\r\n    this.remove(name)\r\n    this.append(name, value)\r\n\r\n    return this\r\n  }\r\n\r\n  append (name: string, value?: string | string[]) {\r\n    if (Array.isArray(value)) {\r\n      for (const val of value) {\r\n        if (val != null) {\r\n          this.rawHeaders.push(name, val)\r\n        }\r\n      }\r\n    } else {\r\n      if (value != null) {\r\n        this.rawHeaders.push(name, value)\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  name (name: string): string | undefined {\r\n    const lowered = lowerHeader(name)\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\r\n        return this.rawHeaders[i]\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  get (name: string): string | undefined {\r\n    const lowered = lowerHeader(name)\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\r\n        return this.rawHeaders[i + 1]\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  getAll (name: string): string[] {\r\n    const lowered = lowerHeader(name)\r\n    const result: string[] = []\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\r\n        result.push(this.rawHeaders[i + 1])\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  remove (name: string) {\r\n    const lowered = lowerHeader(name)\r\n\r\n    for (let i = 0; i < this.rawHeaders.length; i += 2) {\r\n      if (lowerHeader(this.rawHeaders[i]) === lowered) {\r\n        splice(this.rawHeaders, i, 2)\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  type (): string\r\n  type (value: string): this\r\n  type (value?: string): string | this {\r\n    if (arguments.length === 0) {\r\n      return type(this.get('Content-Type')) as string\r\n    }\r\n\r\n    return this.set('Content-Type', value)\r\n  }\r\n}\r\n"]}